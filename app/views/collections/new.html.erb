<div class="container mt-5">
  <h1 class="mb-4"><%= t('newcollection.title') %>
    <% if user_signed_in? and current_user.admin? %>
      <%= t('newcollection.pageforadmin') %>
    <% end %>
  </h1>

  <%= form_with(model: @collection, local: true, html: { class: 'needs-validation', novalidate: true }) do |form| %>
    <% if @collection.errors.any? %>
      <div class="alert alert-danger">
        <h4 class="alert-heading"><%= pluralize(@collection.errors.count, "error") %> prohibited this collection from being saved:</h4>
        <ul>
          <% @collection.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <% if user_signed_in? and current_user.admin? %>
      <div class="mb-3">
        <%= form.label :user_id, t('newcollection.userid'), class: 'form-label' %>
        <%= form.select :user_id, options_for_select([[t('newcollection.myuserid'), current_user.id]] + @users.map { |user| ["#{user.id} - #{user.email}", user.id] }), {}, { class: 'form-select', required: true } %>
      </div>
    <% end %>

    <div class="mb-3">
      <%= form.label :name, t('newcollection.name'), class: 'form-label' %>
      <%= form.text_field :name, class: 'form-control', required: true %>
    </div>

    <div class="mb-3">
      <%= form.label :description, t('newcollection.description'), class: 'form-label' %>
      <%= form.text_area :description, class: 'form-control', rows: 3 %>
    </div>

    <div class="mb-3">
      <%= form.label :category, t('newcollection.category'), class: 'form-label' %>
      <%= form.select :category, ['Books', 'Signs', 'Silverware', 'Other'], {}, class: 'form-select' %>
    </div>

    <div class="mb-3">
      <%= form.label :image_url, t('newcollection.image'), class: 'form-label' %>
      <%= form.hidden_field :image_url, id: 'image-url', class: 'form-control' %>
      <div id="drop-zone" class="drop-zone">
        <p><%= t('newcollection.dropzone') %></p>
        <%= file_field_tag :image, id: 'image-upload', class: 'form-control', style: 'display: none;' %>
      </div>
    </div>

    <h5><%= t('newcollection.custom') %></h5>

    <div class="mb-3">
      <%= form.label :custom_string1_name,  t('newcollection.string1'), class: 'form-label' %>
      <%= form.text_field :custom_string1_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_string2_name, t('newcollection.string2'), class: 'form-label' %>
      <%= form.text_field :custom_string2_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_string3_name, t('newcollection.string3'), class: 'form-label' %>
      <%= form.text_field :custom_string3_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_int1_name, t('newcollection.int1'), class: 'form-label' %>
      <%= form.text_field :custom_int1_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_int2_name, t('newcollection.int2'), class: 'form-label' %>
      <%= form.text_field :custom_int2_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_int3_name, t('newcollection.int3'), class: 'form-label' %>
      <%= form.text_field :custom_int3_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_text1_name, t('newcollection.text1'), class: 'form-label' %>
      <%= form.text_field :custom_text1_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_text2_name, t('newcollection.text2'), class: 'form-label' %>
      <%= form.text_field :custom_text2_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_text3_name, t('newcollection.text3'), class: 'form-label' %>
      <%= form.text_field :custom_text3_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_bool1_name, t('newcollection.bool1'), class: 'form-label' %>
      <%= form.text_field :custom_bool1_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_bool2_name, t('newcollection.bool2'), class: 'form-label' %>
      <%= form.text_field :custom_bool2_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_bool3_name, t('newcollection.bool3'), class: 'form-label' %>
      <%= form.text_field :custom_bool3_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_date1_name, t('newcollection.date1'), class: 'form-label' %>
      <%= form.text_field :custom_date1_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_date2_name, t('newcollection.date2'), class: 'form-label' %>
      <%= form.text_field :custom_date2_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.label :custom_date3_name, t('newcollection.date3'), class: 'form-label' %>
      <%= form.text_field :custom_date3_name, class: 'form-control' %>
    </div>

    <div class="mb-3">
      <%= form.submit t('newcollection.create'), class: 'btn btn-primary' %>
      <%= link_to t('newcollection.back'), collections_path, class: 'btn btn-secondary' %>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const dropZone = document.getElementById('drop-zone');
    const imageUpload = document.getElementById('image-upload');
    const imageUrlField = document.getElementById('image-url');
    const imgbbApiKey = 'd267db4a1f6e1a8f9cac3e32931d7d6b';
  
    dropZone.addEventListener('click', () => imageUpload.click());
  
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('dragover');
    });
  
    dropZone.addEventListener('dragleave', () => dropZone.classList.remove('dragover'));
  
    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('dragover');
      const file = e.dataTransfer.files[0];
      uploadImage(file);
    });
  
    imageUpload.addEventListener('change', (e) => {
      const file = e.target.files[0];
      uploadImage(file);
    });
  
    function uploadImage(file) {
      const formData = new FormData();
      formData.append('image', file);
  
      fetch(`https://api.imgbb.com/1/upload?key=${imgbbApiKey}`, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.data && data.data.url) {
          imageUrlField.value = data.data.url;
          dropZone.innerHTML = `<img src="${data.data.url}" alt="Uploaded Image" class="img-fluid" />`;
        } else {
          console.error('Error: No URL found in response', data);
        }
      })
      .catch(err => console.error('Error uploading image:', err));
    }
  });
</script>

<style>
.drop-zone {
  border: 2px dashed #007bff;
  padding: 20px;
  text-align: center;
  cursor: pointer;
  transition: background-color 0.3s ease, border-color 0.3s ease;
}

.drop-zone.dragover {
  background-color: #e9ecef;
  border-color: #0056b3;
}

.drop-zone p {
  margin: 0;
  font-size: 16px;
  color: #007bff;
}
</style>